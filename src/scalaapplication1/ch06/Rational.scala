package scalaapplication1.ch06

/**
 * A Rational number (numerator, denomintor).  Constructor is automatically generated by compiler
 */
class Rational(n: Int, d: Int) {
  
  require (d != 0)
  
  // The initializers of these three fields are folded in to the primary constructor in the order they appear
  private val g = gcd(n.abs, d.abs)
  val numer = n / g
  val denom = d / g
  
  def this(n: Int) = this(n, 1)  // auxillary constructor
  
  def add(that: Rational) : Rational = {
    new Rational(
      (this.numer * that.denom + that.numer * this.denom),
      (this.denom * that.denom)
    )
  }
  
  override def toString = numer + "/" + denom

  private def gcd(a: Int, b: Int) : Int = {
    if(b == 0) a else gcd(b, a % b)
  }
}